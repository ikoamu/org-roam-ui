--- index.tsx.orig	2023-07-20 08:56:47.982597952 +0800
+++ index.tsx	2023-07-20 08:57:50.096169841 +0800
@@ -1,4 +1,5 @@
 import { HamburgerIcon } from '@chakra-ui/icons'
+import graphDataJson from '../graphdata.json'
 import {
   Box,
   Flex,
@@ -346,6 +347,7 @@
   }
   useEffect(() => {
     if (!graphData) {
+      updateGraphData(graphDataJson.data)
       return
     }
     currentGraphDataRef.current = graphData
@@ -429,58 +431,6 @@
   }
 
   useEffect(() => {
-    // initialize websocket
-    WebSocketRef.current = new ReconnectingWebSocket('ws://localhost:35903')
-    WebSocketRef.current.addEventListener('open', () => {
-      console.log('Connection with Emacs established')
-    })
-    WebSocketRef.current.addEventListener('message', (event: any) => {
-      const bh = behaviorRef.current
-      const message = JSON.parse(event.data)
-      switch (message.type) {
-        case 'graphdata':
-          return updateGraphData(message.data)
-        case 'variables':
-          setEmacsVariables(message.data)
-          console.log(message)
-          return
-        case 'theme':
-          return setEmacsTheme(['custom', message.data])
-        case 'command':
-          switch (message.data.commandName) {
-            case 'local':
-              const speed = behavior.zoomSpeed
-              const padding = behavior.zoomPadding
-              followBehavior('local', message.data.id, speed, padding)
-              setEmacsNodeId(message.data.id)
-              break
-            case 'zoom': {
-              const speed = message?.data?.speed || bh.zoomSpeed
-              const padding = message?.data?.padding || bh.zoomPadding
-              followBehavior('zoom', message.data.id, speed, padding)
-              setEmacsNodeId(message.data.id)
-              break
-            }
-            case 'follow': {
-              followBehavior(bh.follow, message.data.id, bh.zoomSpeed, bh.zoomPadding)
-              setEmacsNodeId(message.data.id)
-              break
-            }
-            case 'change-local-graph': {
-              const node = nodeByIdRef.current[message.data.id as string]
-              if (!node) break
-              console.log(message)
-              handleLocal(node, message.data.manipulation)
-              break
-            }
-            default:
-              return console.error('unknown message type', message.type)
-          }
-      }
-    })
-  }, [])
-
  useEffect(() => {
     const fg = graphRef.current
     if (!fg || scope.nodeIds.length > 1) {
       return
